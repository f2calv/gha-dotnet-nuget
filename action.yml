name: .NET Build/Test/Pack/Push
author: Alex Vincent
description: Performs steps required to push a versioned NuGet package to the official NuGet and/or GitHub packages feeds.

inputs:
  checkout:
    type: boolean
    description: Checkout the current repository?
    default: true
  version:
    type: string
    description: NuGet package version e.g. 1.2.301-feature-my-feature.12
    required: true
  GITHUB_TOKEN:
    description: GitHub token to push to GitHub packages e.g. secrets.GITHUB_TOKEN
    type: string
  NUGET_API_KEY:
    description: NuGet API key to push to nuget.org feed e.g. secrets.NUGET_API_KEY
    type: string
  configuration:
    type: string
    description: .NET Configuration e.g. Debug or Release
    default: Release
  solution-name:
    type: string
    description: Specify exactly which .NET solution or project to build when multiple exist. e.g. MySolution.sln or MyProject.csproj
    default: ''
  push:
    type: boolean
    description: Should we push packages?
    default: true
  push-preview:
    description: Publish NuGet package from a preview branch?
    type: boolean
    default: false
  execute-tests:
    description: Execute unit tests. Default is 'true'
    type: boolean
    default: true
  code-coverage:
    description: Execute code coverage tools. Default is 'true'
    type: boolean
    default: true
  dotnet-restore-args:
    type: string
    description: Optional 'dotnet restore' arguments.
    default: ''
  dotnet-build-args:
    type: string
    description: Optional 'dotnet build' arguments.
    default: ''
  dotnet-test-args:
    type: string
    description: Optional 'dotnet test' arguments.
    default: ''
  dotnet-pack-args:
    type: string
    description: Optional 'dotnet pack' arguments.
    default: ''
  dotnet-push-args:
    type: string
    description: Optional 'dotnet push' arguments.
    default: ''

outputs:
  configuration:
    description: .NET Configuration e.g. Debug or Release
    value: ${{ steps.setvars.outputs.configuration }}

runs:
  using: composite
  steps:
    - uses: actions/checkout@v4
      if: inputs.checkout == 'true' 
      with:
        fetch-depth: 0

    - name: set vars
      shell: bash
      id: setvars
      run: |
        configuration=${{ inputs.configuration }}
        echo "configuration=${configuration:-"Release"}" >> $GITHUB_OUTPUT

    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          9.0.x

    - name: dotnet restore
      shell: bash
      run: dotnet restore ${{ inputs.solution-name }} --verbosity minimal ${{ inputs.dotnet-restore-args }}
      env:
        #https://github.com/NuGet/Home/issues/7575#issuecomment-443801131
        NUGET_RESTORE_MSBUILD_ARGS: /p:Configuration=${{ steps.setvars.outputs.configuration }}

    - name: dotnet build
      shell: bash
      run: dotnet build ${{ inputs.solution-name }} -c ${{ steps.setvars.outputs.configuration }} --no-restore --nologo -p:Version='${{ inputs.version }}' -p:SourceRevisionId=${{ github.sha }} ${{ inputs.dotnet-build-args }}
      #run: dotnet build ${{ inputs.solution-name }} -c ${{ steps.setvars.outputs.configuration }} --nologo -p:Version='${{ inputs.version }}' -p:SourceRevisionId=${{ github.sha }}

    - name: dotnet test
      if: inputs.execute-tests == 'true'
      shell: bash
      run: dotnet test ${{ inputs.solution-name }} -c ${{ steps.setvars.outputs.configuration }} --no-restore --nologo --no-build -p:CollectCoverage=true -p:CoverletOutputFormat=lcov -p:CoverletOutput=${{ github.workspace }}/coverage/ ${{ inputs.dotnet-test-args }}
      #run: dotnet test ${{ inputs.solution-name }} --nologo -p:CollectCoverage=true -p:CoverletOutputFormat=lcov -p:CoverletOutput=${{ github.workspace }}/coverage/

    - name: code coverage - coveralls
      if: inputs.execute-tests == 'true' && inputs.code-coverage == 'true'
      uses: coverallsapp/github-action@v2
      with:
        #file: ${{ github.workspace }}/coverage/coverage.info
        base-path: ${{ github.workspace }}/coverage
    
    - name: debug
      shell: bash
      run: |
        cd ${{ github.workspace }}/coverage
        ls -lsa

    - name: code coverage - report generator
      if: inputs.execute-tests == 'true' && inputs.code-coverage == 'true'
      uses: danielpalme/ReportGenerator-GitHub-Action@v5
      with:
        reports: ${{ github.workspace }}/coverage**.info
        targetdir: ${{ github.workspace }}/coveragereport
        reporttypes: lcov
        tag: ${{ github.run_number }}_${{ github.run_id }}

    # - name: reportgenerator
    #   shell: bash
    #   if: inputs.execute-tests == 'true' && inputs.code-coverage == 'true'
    #   run: |
    #     dotnet tool update -g dotnet-reportgenerator-globaltool
    #     reportgenerator -reports:${{ github.workspace }}/coverage/coverage.info \
    #       -targetdir:${{ github.workspace }}/coveragereport \
    #       -reporttypes:lcov \
    #       -tag:${{ github.run_number }}_${{ github.run_id }}

    - name: code coverage - upload-artifact
      if: inputs.execute-tests == 'true' && inputs.code-coverage == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: coveragereport
        path: coveragereport

    - name: dotnet pack
      shell: bash
      run: dotnet pack ${{ inputs.solution-name }} -c ${{ steps.setvars.outputs.configuration }} --nologo --no-build --include-symbols -p:Version='${{ inputs.version }}' ${{ inputs.dotnet-pack-args }}
      if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)

    - name: dotnet push (api.nuget.org)
      shell: bash
      run: |
        if [[ "${{ inputs.NUGET_API_KEY }}" != "" ]]; \
        then
          dotnet nuget push ${{ github.workspace }}/src/**/*.nupkg --skip-duplicate -k ${{ inputs.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json --skip-duplicate ${{ inputs.dotnet-push-args }}
        else
          echo "::warning title=NUGET_API_KEY::NUGET_API_KEY is missing from secrets, skipping push to api.nuget.org"
        fi
      if: |
        (inputs.push == 'true' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch))
          || inputs.push-preview == 'true'

    - name: dotnet push (nuget.pkg.github.com)
      shell: bash
      run: |
        if [[ "${{ inputs.GITHUB_TOKEN }}" != "" ]]; \
        then
          dotnet tool update -g gpr
          gpr push ${{ github.workspace }}/src/**/*.nupkg -k ${{ inputs.GITHUB_TOKEN }}
        else
          echo "::warning title=GITHUB_TOKEN::GITHUB_TOKEN is missing from secrets, skipping push to nuget.pkg.github.com"
        fi
      if: |
        (inputs.push == 'true' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch))
          || inputs.push-preview == 'true'
