name: .NET Build/Test/Pack/Publish
author: Alex Vincent
description: Performs all the steps required to publish a versioned NuGet package to the official NuGet or GitHub packages feeds.

inputs:
  GITHUB_TOKEN:
    description: i.e. secrets.GITHUB_TOKEN
    type: string
    required: true
  NUGET_API_KEY:
    description: i.e. secrets.NUGET_API_KEY
    type: string
    required: false
  BuildConfiguration:
    description: i.e. Debug or Release
    type: string
    default: Release
  PublishPreview:
    description: Publish preview branch?
    type: boolean
    default: false
  CodeCoverage:
    description: Default is 'true'
    type: boolean
    default: true
  SolutionNameOverride:
    description: Override Visual Studio Solution file, e.g. with a specific .Release version.
    type: string
    default: ""

outputs:
  semVer:
    description: i.e. 1.2.2
    value: ${{ steps.gitversion.outputs.semVer }}
  fullSemVer:
    description: i.e. 1.2.2-2022-04-ci-updates.13
    value: ${{ steps.gitversion.outputs.fullSemVer }}
  BuildConfiguration:
    description: i.e. Debug or Release
    value: ${{ steps.setvars.outputs.BuildConfiguration }}

runs:
  using: composite
  steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: set vars
      shell: bash
      id: setvars
      run: |
        BuildConfiguration=${{ inputs.BuildConfiguration }}
        echo "BuildConfiguration=${BuildConfiguration:-"Release"}" >> $GITHUB_OUTPUT

    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: gitversion (1 of 2)
      uses: gittools/actions/gitversion/setup@v1
      with:
        versionSpec: 5.x

    - name: gitversion (2 of 2)
      id: gitversion
      uses: gittools/actions/gitversion/execute@v1
      with:
        useConfigFile: true
        additionalArguments: /nofetch

    - uses: f2calv/gha-check-release-exists@v2
      id: check-release-exists
      with:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
        ReleaseName: ${{ steps.gitversion.outputs.semVer }}

    - name: dotnet restore
      shell: bash
      run: dotnet restore ${{ inputs.SolutionNameOverride }} --verbosity minimal
      env:
        #https://github.com/NuGet/Home/issues/7575#issuecomment-443801131
        NUGET_RESTORE_MSBUILD_ARGS: /p:Configuration=${{ steps.setvars.outputs.BuildConfiguration }}

    - name: dotnet build
      shell: bash
      run: dotnet build ${{ inputs.SolutionNameOverride }} -c ${{ steps.setvars.outputs.BuildConfiguration }} --nologo --no-restore -p:Version='${{ steps.gitversion.outputs.semVer }}' -p:SourceRevisionId=${{ github.sha }}

    - name: dotnet test
      shell: bash
      run: dotnet test ${{ inputs.SolutionNameOverride }} -c ${{ steps.setvars.outputs.BuildConfiguration }} --nologo --no-restore --no-build -p:CollectCoverage=true -p:CoverletOutputFormat=lcov -p:CoverletOutput=${{ github.workspace }}/coverage/

    - name: code coverage - coveralls
      if: inputs.CodeCoverage == 'true'
      uses: coverallsapp/github-action@v2.3.0
      with:
        file: ${{ github.workspace }}/coverage/coverage.info

    - name: code coverage - report generator
      if: inputs.CodeCoverage == 'true'
      uses: danielpalme/ReportGenerator-GitHub-Action@v5
      with:
        reports: ${{ github.workspace }}/coverage/coverage.info
        targetdir: ${{ github.workspace }}/coveragereport
        reporttypes: lcov
        tag: ${{ github.run_number }}_${{ github.run_id }}

    # - name: reportgenerator
    #   shell: bash
    #   if: inputs.CodeCoverage == 'true'
    #   run: |
    #     dotnet tool update -g dotnet-reportgenerator-globaltool
    #     reportgenerator -reports:${{ github.workspace }}/coverage/coverage.info \
    #       -targetdir:${{ github.workspace }}/coveragereport \
    #       -reporttypes:lcov \
    #       -tag:${{ github.run_number }}_${{ github.run_id }}

    - name: code coverage - upload-artifact
      if: inputs.CodeCoverage == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: coveragereport
        path: coveragereport

    - name: dotnet pack
      shell: bash
      run: dotnet pack ${{ inputs.SolutionNameOverride }} -c ${{ steps.setvars.outputs.BuildConfiguration }} --nologo --no-build --include-symbols -p:Version='${{ steps.gitversion.outputs.semVer }}'
      if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)

    - name: dotnet push (api.nuget.org)
      shell: bash
      run: |
        if [[ "${{ inputs.NUGET_API_KEY }}" != "" ]]; \
        then
          dotnet nuget push ${{ github.workspace }}/src/**/*.nupkg --skip-duplicate -k ${{ inputs.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json --skip-duplicate
        else
          echo "::warning title=NUGET_API_KEY::NUGET_API_KEY is missing from secrets, skipping push to api.nuget.org."
        fi
      if: |
        steps.check-release-exists.outputs.ReleaseExists == 'false'
          && (github.ref == format('refs/heads/{0}', github.event.repository.default_branch) || inputs.PublishPreview == 'true')

    - name: dotnet push (nuget.pkg.github.com)
      shell: bash
      run: |
        dotnet tool update -g gpr
        gpr push ${{ github.workspace }}/src/**/*.nupkg -k ${{ inputs.GITHUB_TOKEN }}
      if: |
        steps.check-release-exists.outputs.ReleaseExists == 'false'
          && (github.ref == format('refs/heads/{0}', github.event.repository.default_branch) || inputs.PublishPreview == 'true')

    - name: create release ${{ steps.gitversion.outputs.fullSemVer }}
      uses: softprops/action-gh-release@v2
      #Note: always attempt to create a release if primary nuget push has succeeded (i.e. if gpr push has failed)
      if: |
        steps.check-release-exists.outputs.ReleaseExists == 'false'
          && (github.ref == format('refs/heads/{0}', github.event.repository.default_branch) || inputs.PublishPreview == 'true')
      with:
        tag_name: ${{ steps.gitversion.outputs.fullSemVer }}
        name: ${{ steps.gitversion.outputs.fullSemVer }}
